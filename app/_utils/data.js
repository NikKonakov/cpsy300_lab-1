import {
  getFirestore,
  collection,
  getDocs,
  doc,
  getDoc,
  addDoc,
  updateDoc,
  setDoc,
  deleteDoc,
  query,
  where,
  orderBy,
} from "firebase/firestore";
import { db } from "./firebaseConfig";


/**
 * @deprecated
 * This is a TEST function to get one item from the "students" collection.
 * It retrieves the document with ID "0" and logs its data.
 * @returns one item from the "students" collection
 */
export async function getOneItemTest() {
  const docRef = doc(db, "students", "0");
  try {
    const docSnap = await getDoc(docRef);
    console.log("Document data:", docSnap.data());
    if (docSnap.exists()) {
      return { id: docSnap.id, ...docSnap.data() };
    } else {
      console.error("No such document!");
      return null;
    }
  } catch (error) {
    console.error("DATA_FETCH_DB: Error getting document.\n", error);
  }
}


export async function getDocumentById(pCollectionName, pId) {
  const docRef = doc(db, pCollectionName, pId);
	try {
		const docSnap = await getDoc(docRef);
		if (docSnap.exists()) {
			return { id: docSnap.id, ...docSnap.data() };
		} else {
			console.error('No such document!');
			return null;
		}
	} catch (error) {
		console.error('DATA_FETCH_DB: Error getting document.\n', error);
	}
}


/**
 * This method fetches all documents from a specified collection in the Firestore database.
 * It retrieves all documents from the collection, formats them into an array of objects,
 * and returns the array.
 * @param {*} collectionName 
 * @param {*} isTest Enables logging for debugging purposes
 * @returns 
 */
export async function fetchCollectionData(collectionName, isTest = false) {
  const querySnapshot = await getDocs(collection(db, collectionName));
  let data = [];
  querySnapshot.forEach((doc) => {
    data.push({ id: doc.id, ...doc.data() });
  });
  if (isTest) {
    console.log(
      "DATA_FETCH_DB: Data fetched from collection:",
      collectionName,
      "\n",
      data
    );
  }
  return data;
}


export async function fetchCollectionDataWithQuery(pCollectionName, pQuery, pIsTest = false) {
  //...query - parses all the array's elements as arguments to the where() function 
  const q = query(collection(db, pCollectionName), where(...pQuery));
  const querySnapshot = await getDocs(q);
  let data = [];
	querySnapshot.forEach((doc) => {
    data.push({ id: doc.id, ...doc.data() });
    if (pIsTest) {
      console.log("DATA_FETCH_DB: Data fetched from collection with query:", pCollectionName, "\n", doc.id, " => ", doc.data());
    }
	});
  return data;
}


/**
 * This method adds a new document to the "students" collection specifically.
 * It takes an object with student data and adds it to the "students" collection.
 * P.S. ID is auto generated by Firestore when a new document is added.
 * @param {*} object
 * @param {*} collectionName
 * @param {*} isTest Enables logging for debugging purposes
 */
export async function addNewDocument(object, collectionName, isTest = false) {
  const docRef = await addDoc(collection(db, collectionName), object);
  if (isTest) {
    console.log("DATA_FETCH_DB: Document written with ID.\n", docRef.id);
  }
}


/**
 * This method updates a document in the "students" collection specifically.
 * It takes an object ID and an object with updated fields,
 * and updates the document with that ID in the "students" collection.
 * P.S. ID is auto generated by Firestore when a new document is added.
 * @param {*} objectId
 * @param {*} updatedFields
 * @param {*} isTest Enables logging for debugging purposes
 */
export async function updateStudentDocument(
  objectId,
  updatedFields,
  isTest = false
) {
  const docRef = doc(db, "students", objectId);
  /*Original code from firebase documentation to update a document

  const updateDoc = await updateDoc(docRef, {
    capital: true
  });

    */
  try {
    await updateDoc(docRef, updatedFields);
    if (isTest) {
      console.log("Document updated with ID: ", objectId);
    }
  } catch (error) {
    console.error("DATA_FETCH_DB: Error updating document.\n", error);
  }
}


/**
 * This method updates a document in any collection that is presesnt in the Firestore database.
 * It takes an object ID, a collection name, and an object with updated fields,
 * and updates the document with that ID in the specified collection.
 * 
 * P.S. ID is auto generated by Firestore when a new document is added.
 * @param {*} objectId
 * @param {*} collection
 * @param {*} updatedFields
 * @param {*} isTest Enables logging for debugging purposes
 */
export async function updateDocument(
  objectId,
  collection,
  updatedFields,
  isTest = false
) {
  const docRef = doc(db, collection, objectId, updatedFields);
  try {
    await updateDoc(docRef, updatedFields);
    if (isTest) {
      console.log("Document updated with ID: ", objectId);
    }
  } catch (error) {
    console.error("DATA_FETCH_DB: Error updating document.\n", error);
  }
}


/**
 * @UNSAFE
 * This method overwrites document forcefully in any collection that is present in the Firestore database.
 * It takes an object ID, a collection name, and a new object,
 * and overwrites the document with that ID in the specified collection.
 * USE IT WITH CAUTION, as it will replace the entire document with the new object
 * and may cause data collisions or inconsistencies if not used carefully.
 * @param {*} objectId
 * @param {*} collection
 * @param {*} newObject
 * @param {*} isTest Enables logging for debugging purposes
 */
export async function overwriteDocument(
  objectId,
  collection,
  newObject,
  isTest = false
) {
  const docRef = doc(db, collection, objectId);
  try {
    await setDoc(docRef, newObject);
    if (isTest) {
      console.log("Document with ID is overwritten: ", objectId);
    }
  } catch (error) {
    console.error("DATA_FETCH_DB:Error overwriting document.\n", error);
  }
}


/**
 * Deletes a document from any collection in the Firestore database.
 * It takes an object ID and a collection name,
 * and deletes the document with that ID in the specified collection.
 * @param {*} objectId
 * @param {*} collection
 * @param {*} isTest Enables logging for debugging purposes
 */
export async function deleteDocument(objectId, collection, isTest = false) {
  const docRef = doc(db, collection, objectId);
  try {
    await deleteDoc(docRef);
    if (isTest) {
      console.log("Document with ID deleted: ", objectId);
    }
  } catch (error) {
    console.error("DATA_FETCH_DB: Error deleting document.\n", error);
  }
}
